// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	json "encoding/json"
	io "io"

	mock "github.com/stretchr/testify/mock"

	smartling "github.com/Smartling/api-sdk-go"

	url "net/url"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields:
func (_m *ClientInterface) Authenticate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFile provides a mock function with given fields: projectID, uri
func (_m *ClientInterface) DeleteFile(projectID string, uri string) error {
	ret := _m.Called(projectID, uri)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(projectID, uri)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadFile provides a mock function with given fields: projectID, uri
func (_m *ClientInterface) DownloadFile(projectID string, uri string) (io.Reader, error) {
	ret := _m.Called(projectID, uri)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(string, string) io.Reader); ok {
		r0 = rf(projectID, uri)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(projectID, uri)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadTranslation provides a mock function with given fields: projectID, localeID, request
func (_m *ClientInterface) DownloadTranslation(projectID string, localeID string, request smartling.FileDownloadRequest) (io.Reader, error) {
	ret := _m.Called(projectID, localeID, request)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(string, string, smartling.FileDownloadRequest) io.Reader); ok {
		r0 = rf(projectID, localeID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, smartling.FileDownloadRequest) error); ok {
		r1 = rf(projectID, localeID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, params, options
func (_m *ClientInterface) Get(_a0 string, params url.Values, options ...interface{}) (io.ReadCloser, int, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0, params)
	_ca = append(_ca, options...)
	ret := _m.Called(_ca...)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(string, url.Values, ...interface{}) io.ReadCloser); ok {
		r0 = rf(_a0, params, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, url.Values, ...interface{}) int); ok {
		r1 = rf(_a0, params, options...)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, url.Values, ...interface{}) error); ok {
		r2 = rf(_a0, params, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetFileStatus provides a mock function with given fields: projectID, fileURI
func (_m *ClientInterface) GetFileStatus(projectID string, fileURI string) (*smartling.FileStatus, error) {
	ret := _m.Called(projectID, fileURI)

	var r0 *smartling.FileStatus
	if rf, ok := ret.Get(0).(func(string, string) *smartling.FileStatus); ok {
		r0 = rf(projectID, fileURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*smartling.FileStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(projectID, fileURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJSON provides a mock function with given fields: _a0, params, result, options
func (_m *ClientInterface) GetJSON(_a0 string, params url.Values, result interface{}, options ...interface{}) (json.RawMessage, int, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0, params, result)
	_ca = append(_ca, options...)
	ret := _m.Called(_ca...)

	var r0 json.RawMessage
	if rf, ok := ret.Get(0).(func(string, url.Values, interface{}, ...interface{}) json.RawMessage); ok {
		r0 = rf(_a0, params, result, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, url.Values, interface{}, ...interface{}) int); ok {
		r1 = rf(_a0, params, result, options...)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, url.Values, interface{}, ...interface{}) error); ok {
		r2 = rf(_a0, params, result, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProjectDetails provides a mock function with given fields: projectID
func (_m *ClientInterface) GetProjectDetails(projectID string) (*smartling.ProjectDetails, error) {
	ret := _m.Called(projectID)

	var r0 *smartling.ProjectDetails
	if rf, ok := ret.Get(0).(func(string) *smartling.ProjectDetails); ok {
		r0 = rf(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*smartling.ProjectDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Import provides a mock function with given fields: projectID, localeID, request
func (_m *ClientInterface) Import(projectID string, localeID string, request smartling.ImportRequest) (*smartling.FileImportResult, error) {
	ret := _m.Called(projectID, localeID, request)

	var r0 *smartling.FileImportResult
	if rf, ok := ret.Get(0).(func(string, string, smartling.ImportRequest) *smartling.FileImportResult); ok {
		r0 = rf(projectID, localeID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*smartling.FileImportResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, smartling.ImportRequest) error); ok {
		r1 = rf(projectID, localeID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LastModified provides a mock function with given fields: projectID, request
func (_m *ClientInterface) LastModified(projectID string, request smartling.FileLastModifiedRequest) (*smartling.FileLastModifiedLocales, error) {
	ret := _m.Called(projectID, request)

	var r0 *smartling.FileLastModifiedLocales
	if rf, ok := ret.Get(0).(func(string, smartling.FileLastModifiedRequest) *smartling.FileLastModifiedLocales); ok {
		r0 = rf(projectID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*smartling.FileLastModifiedLocales)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, smartling.FileLastModifiedRequest) error); ok {
		r1 = rf(projectID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllFiles provides a mock function with given fields: projectID, request
func (_m *ClientInterface) ListAllFiles(projectID string, request smartling.FilesListRequest) ([]smartling.File, error) {
	ret := _m.Called(projectID, request)

	var r0 []smartling.File
	if rf, ok := ret.Get(0).(func(string, smartling.FilesListRequest) []smartling.File); ok {
		r0 = rf(projectID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]smartling.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, smartling.FilesListRequest) error); ok {
		r1 = rf(projectID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFileTypes provides a mock function with given fields: projectID
func (_m *ClientInterface) ListFileTypes(projectID string) ([]smartling.FileType, error) {
	ret := _m.Called(projectID)

	var r0 []smartling.FileType
	if rf, ok := ret.Get(0).(func(string) []smartling.FileType); ok {
		r0 = rf(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]smartling.FileType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFiles provides a mock function with given fields: projectID, request
func (_m *ClientInterface) ListFiles(projectID string, request smartling.FilesListRequest) (*smartling.FilesList, error) {
	ret := _m.Called(projectID, request)

	var r0 *smartling.FilesList
	if rf, ok := ret.Get(0).(func(string, smartling.FilesListRequest) *smartling.FilesList); ok {
		r0 = rf(projectID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*smartling.FilesList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, smartling.FilesListRequest) error); ok {
		r1 = rf(projectID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: accountID, request
func (_m *ClientInterface) ListProjects(accountID string, request smartling.ProjectsListRequest) (*smartling.ProjectsList, error) {
	ret := _m.Called(accountID, request)

	var r0 *smartling.ProjectsList
	if rf, ok := ret.Get(0).(func(string, smartling.ProjectsListRequest) *smartling.ProjectsList); ok {
		r0 = rf(accountID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*smartling.ProjectsList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, smartling.ProjectsListRequest) error); ok {
		r1 = rf(accountID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: _a0, payload, result, options
func (_m *ClientInterface) Post(_a0 string, payload []byte, result interface{}, options ...interface{}) (json.RawMessage, int, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0, payload, result)
	_ca = append(_ca, options...)
	ret := _m.Called(_ca...)

	var r0 json.RawMessage
	if rf, ok := ret.Get(0).(func(string, []byte, interface{}, ...interface{}) json.RawMessage); ok {
		r0 = rf(_a0, payload, result, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, []byte, interface{}, ...interface{}) int); ok {
		r1 = rf(_a0, payload, result, options...)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, []byte, interface{}, ...interface{}) error); ok {
		r2 = rf(_a0, payload, result, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RenameFile provides a mock function with given fields: projectID, oldURI, newURI
func (_m *ClientInterface) RenameFile(projectID string, oldURI string, newURI string) error {
	ret := _m.Called(projectID, oldURI, newURI)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(projectID, oldURI, newURI)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadFile provides a mock function with given fields: projectID, request
func (_m *ClientInterface) UploadFile(projectID string, request smartling.FileUploadRequest) (*smartling.FileUploadResult, error) {
	ret := _m.Called(projectID, request)

	var r0 *smartling.FileUploadResult
	if rf, ok := ret.Get(0).(func(string, smartling.FileUploadRequest) *smartling.FileUploadResult); ok {
		r0 = rf(projectID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*smartling.FileUploadResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, smartling.FileUploadRequest) error); ok {
		r1 = rf(projectID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
